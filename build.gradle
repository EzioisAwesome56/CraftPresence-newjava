import net.fabricmc.loom.LoomGradlePlugin

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url = "https://maven.fabricmc.net/" }
        maven { url = "https://gitlab.com/EMC-Framework/maven/raw/master/" }
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "net.fabricmc:fabric-loom:0.5-SNAPSHOT"
        classpath "com.github.CDAGaming:CurseGradle:master-SNAPSHOT"
        classpath "gradle.plugin.net.minecrell:licenser:0.4.1"
    }
}

apply plugin: LoomGradlePlugin
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: "net.minecrell.licenser"

import org.apache.tools.ant.filters.ReplaceTokens

version = "${versionId}"
group = "com.gitlab.cdagaming"
archivesBaseName = "${archive_name}-${mc_version}-${versionType}"

allprojects {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

license {
    // Exclude JUnixSocket Files
    exclude "**/newsclub/**"
    exclude "**/maven/com.kohlschutter.junixsocket/**"
    exclude "**/jni/**"
    // Exclude Non-Parsable Files
    exclude "**/*.lang"
    exclude "**/*.info"
    exclude "**/*.mcmeta"
    exclude "**/*.properties"
    // Exclude other External Sources
    exclude "**/WinRegistry.java"
    exclude "**/impl/guava/**"
}

curseforge {
    project {
        apiKey = System.getenv("CF_APIKEY")
        id = "297038"
        changelog = file("Changes.md")
        changelogType = "markdown"
        releaseType = "${versionType}".toLowerCase()
        addGameVersion "${mc_version}"
        addGameVersion "Fabric"
        relations {
            requiredDependency 'fabric-api'
        }

        mainArtifact(remapJar) {
            displayName = "${archive_name} v${version} ${versionLabel} (${mc_version})-newjava"
        }

        options {
            forgeGradleIntegration = false
        }
    }
}

minecraft {
    // N/A
}

repositories {
    jcenter()
    mavenCentral()
    maven { url = "https://maven.fabricmc.net/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${mc_version}"
    mappings "net.fabricmc:yarn:${mc_mappings}"
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    modImplementation "net.fabricmc:fabric-loader:0.10.+"

    // CraftPresence itself doesn't use Fabric API at all
    // this is purely for optional dependency testing and integration with other mods
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    modImplementation "io.github.prospector:modmenu:${modmenu_version}"
}

jar {
    from sourceSets.main.output
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", "${mc_version}"

    // replace stuff in fabric.mod.json, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'fabric.mod.json'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': "${mc_version}"
    }

    // copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'fabric.mod.json'
    }
}

def copyDir = "$compileJava.temporaryDir/replaced"
task processSource(type: Sync) {
    // This will ensure that this task is redone when the properties change.
    inputs.property "modName", "${mod_name}"
    inputs.property "versionId", "${versionId}"
    inputs.property "fingerprint", "${certFingerprint}"
    inputs.property "versionType", "${versionType}"
    inputs.property "versionLabel", "${versionLabel}"

    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [
            MOD_NAME     : mod_name,
            VERSION_ID   : versionId,
            FINGERPRINT  : certFingerprint,
            VERSION_TYPE : versionType,
            VERSION_LABEL: versionLabel
    ])
    into copyDir
}

compileJava {
    source = processSource.outputs
}

tasks.curseforge.dependsOn build
